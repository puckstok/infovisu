Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/nbclient/client.py", line 1265, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 650, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py", line 222, in __aexit__
    await self.gen.athrow(typ, value, traceback)
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/nbclient/client.py", line 648, in async_setup_kernel
    yield
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/nbclient/client.py", line 703, in async_execute
    await self.async_execute_cell(
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/nbclient/client.py", line 1021, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/nbclient/client.py", line 915, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

df4 = pd.read_csv('migranten_per_jaar_per_land.csv')
df5 = df4[df4.Year.between(2000, 2017)]
df10 = df5[df5["Country of asylum"] == 'Sweden']

df7 = pd.read_csv('aanslagen_per_jaar_per_land_per_groep.csv')
df8 = df7[df7.year.between(2000, 2017)]
df11 = df8[df8["country"] == 'Sweden']

groups = df11['group'].unique()

color_map = {group: color for group, color in zip(groups, px.colors.qualitative.Vivid)}

fig = go.Figure(layout=dict(
    legend=dict(
        xref='container',
        yref='container',
        y=0.80,
        traceorder='normal',
        font=dict(size=12),
        bgcolor='rgba(0,0,0,0)'
    ),
))

fig.add_trace(go.Bar(
    x=df10['Year'],
    y=df10["Refugees under UNHCR's mandate"],
    marker_color='rgb(238, 75, 43)',
    name="Vluchtelingen",
    yaxis='y',
    offsetgroup=0,
    width=0.4
))

for group in groups:
    group_data = df11[df11['group'] == group]
    fig.add_trace(go.Bar(
        x=group_data['year'],
        y=group_data['count'],
        marker_color=color_map.get(group, 'rgb(129, 133, 137)'),
        hovertext=group_data['group'],
        name=group,
        yaxis='y2',
        offsetgroup=1,
        width=0.4
    ))

fig.update_layout(
    title='Aantal vluchtelingen en terroristische aanslagen in Zweden',
    xaxis=dict(type='category', categoryorder='array', categoryarray=df10['Year']),
    yaxis=dict(range=[0, 250000], title="Vluchtelingen onder UNHCR's mandate", side='left'),
    yaxis2=dict(range=[0, 35], title="Terroristische aanslagen", overlaying='y', side='right'),
    xaxis_title='Year',
    height=500,
    bargap=0.1,
    plot_bgcolor='rgb(252, 245, 245)',
)

fig.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[5], line 17[0m
[1;32m     13[0m groups [38;5;241m=[39m df11[[38;5;124m'[39m[38;5;124mgroup[39m[38;5;124m'[39m][38;5;241m.[39munique()
[1;32m     15[0m color_map [38;5;241m=[39m {group: color [38;5;28;01mfor[39;00m group, color [38;5;129;01min[39;00m [38;5;28mzip[39m(groups, px[38;5;241m.[39mcolors[38;5;241m.[39mqualitative[38;5;241m.[39mVivid)}
[0;32m---> 17[0m fig [38;5;241m=[39m [43mgo[49m[38;5;241;43m.[39;49m[43mFigure[49m[43m([49m[43mlayout[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m
[1;32m     18[0m [43m    [49m[43mlegend[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m
[1;32m     19[0m [43m        [49m[43mxref[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mcontainer[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     20[0m [43m        [49m[43myref[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mcontainer[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     21[0m [43m        [49m[43my[49m[38;5;241;43m=[39;49m[38;5;241;43m0.80[39;49m[43m,[49m
[1;32m     22[0m [43m        [49m[43mtraceorder[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mnormal[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m     23[0m [43m        [49m[43mfont[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43msize[49m[38;5;241;43m=[39;49m[38;5;241;43m12[39;49m[43m)[49m[43m,[49m
[1;32m     24[0m [43m        [49m[43mbgcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mrgba(0,0,0,0)[39;49m[38;5;124;43m'[39;49m
[1;32m     25[0m [43m    [49m[43m)[49m[43m,[49m
[1;32m     26[0m [43m)[49m[43m)[49m
[1;32m     28[0m fig[38;5;241m.[39madd_trace(go[38;5;241m.[39mBar(
[1;32m     29[0m     x[38;5;241m=[39mdf10[[38;5;124m'[39m[38;5;124mYear[39m[38;5;124m'[39m],
[1;32m     30[0m     y[38;5;241m=[39mdf10[[38;5;124m"[39m[38;5;124mRefugees under UNHCR[39m[38;5;124m'[39m[38;5;124ms mandate[39m[38;5;124m"[39m],
[0;32m   (...)[0m
[1;32m     35[0m     width[38;5;241m=[39m[38;5;241m0.4[39m
[1;32m     36[0m ))
[1;32m     38[0m [38;5;28;01mfor[39;00m group [38;5;129;01min[39;00m groups:

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:629[0m, in [0;36mFigure.__init__[0;34m(self, data, layout, frames, skip_invalid, **kwargs)[0m
[1;32m      5[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m(
[1;32m      6[0m     [38;5;28mself[39m, data[38;5;241m=[39m[38;5;28;01mNone[39;00m, layout[38;5;241m=[39m[38;5;28;01mNone[39;00m, frames[38;5;241m=[39m[38;5;28;01mNone[39;00m, skip_invalid[38;5;241m=[39m[38;5;28;01mFalse[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs
[1;32m      7[0m ):
[1;32m      8[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m      9[0m [38;5;124;03m    Create a new :class:Figure instance[39;00m
[1;32m     10[0m 
[0;32m   (...)[0m
[1;32m    627[0m [38;5;124;03m        is invalid AND skip_invalid is False[39;00m
[1;32m    628[0m [38;5;124;03m    """[39;00m
[0;32m--> 629[0m     [38;5;28;43msuper[39;49m[43m([49m[43mFigure[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mlayout[49m[43m,[49m[43m [49m[43mframes[49m[43m,[49m[43m [49m[43mskip_invalid[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/basedatatypes.py:557[0m, in [0;36mBaseFigure.__init__[0;34m(self, data, layout_plotly, frames, skip_invalid, **kwargs)[0m
[1;32m    554[0m [38;5;28mself[39m[38;5;241m.[39m_layout_validator [38;5;241m=[39m LayoutValidator()
[1;32m    556[0m [38;5;66;03m# ### Import Layout ###[39;00m
[0;32m--> 557[0m [38;5;28mself[39m[38;5;241m.[39m_layout_obj [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_layout_validator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m
[1;32m    558[0m [43m    [49m[43mlayout[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[43mskip_invalid[49m[43m,[49m[43m [49m[43m_validate[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate[49m
[1;32m    559[0m [43m[49m[43m)[49m
[1;32m    561[0m [38;5;66;03m# ### Import clone of layout properties ###[39;00m
[1;32m    562[0m [38;5;28mself[39m[38;5;241m.[39m_layout [38;5;241m=[39m deepcopy([38;5;28mself[39m[38;5;241m.[39m_layout_obj[38;5;241m.[39m_props)

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_plotly_utils/basevalidators.py:2476[0m, in [0;36mCompoundValidator.validate_coerce[0;34m(self, v, skip_invalid, _validate)[0m
[1;32m   2473[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class()
[1;32m   2475[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mdict[39m):
[0;32m-> 2476[0m     v [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_class[49m[43m([49m[43mv[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[43mskip_invalid[49m[43m,[49m[43m [49m[43m_validate[49m[38;5;241;43m=[39;49m[43m_validate[49m[43m)[49m
[1;32m   2478[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mself[39m[38;5;241m.[39mdata_class):
[1;32m   2479[0m     [38;5;66;03m# Copy object[39;00m
[1;32m   2480[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class(v)

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/graph_objs/_layout.py:6599[0m, in [0;36mLayout.__init__[0;34m(self, arg, activeselection, activeshape, annotations, annotationdefaults, autosize, autotypenumbers, bargap, bargroupgap, barmode, barnorm, boxgap, boxgroupgap, boxmode, calendar, clickmode, coloraxis, colorscale, colorway, computed, datarevision, dragmode, editrevision, extendfunnelareacolors, extendiciclecolors, extendpiecolors, extendsunburstcolors, extendtreemapcolors, font, funnelareacolorway, funnelgap, funnelgroupgap, funnelmode, geo, grid, height, hiddenlabels, hiddenlabelssrc, hidesources, hoverdistance, hoverlabel, hovermode, iciclecolorway, images, imagedefaults, legend, mapbox, margin, meta, metasrc, minreducedheight, minreducedwidth, modebar, newselection, newshape, paper_bgcolor, piecolorway, plot_bgcolor, polar, scattergap, scattermode, scene, selectdirection, selectionrevision, selections, selectiondefaults, separators, shapes, shapedefaults, showlegend, sliders, sliderdefaults, smith, spikedistance, sunburstcolorway, template, ternary, title, titlefont, transition, treemapcolorway, uirevision, uniformtext, updatemenus, updatemenudefaults, violingap, violingroupgap, violinmode, waterfallgap, waterfallgroupgap, waterfallmode, width, xaxis, yaxis, **kwargs)[0m
[1;32m   6597[0m _v [38;5;241m=[39m legend [38;5;28;01mif[39;00m legend [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v
[1;32m   6598[0m [38;5;28;01mif[39;00m _v [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 6599[0m     [38;5;28;43mself[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mlegend[39;49m[38;5;124;43m"[39;49m[43m][49m [38;5;241m=[39m _v
[1;32m   6600[0m _v [38;5;241m=[39m arg[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mmapbox[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   6601[0m _v [38;5;241m=[39m mapbox [38;5;28;01mif[39;00m mapbox [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/basedatatypes.py:5852[0m, in [0;36mBaseLayoutType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   5849[0m match [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_subplot_re_match(prop)
[1;32m   5850[0m [38;5;28;01mif[39;00m match [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5851[0m     [38;5;66;03m# Set as ordinary property[39;00m
[0;32m-> 5852[0m     [38;5;28;43msuper[39;49m[43m([49m[43mBaseLayoutHierarchyType[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__setitem__[39;49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   5853[0m [38;5;28;01melse[39;00m:
[1;32m   5854[0m     [38;5;66;03m# Set as subplotid property[39;00m
[1;32m   5855[0m     [38;5;28mself[39m[38;5;241m.[39m_set_subplotid_prop(prop, value)

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/basedatatypes.py:4842[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4840[0m [38;5;66;03m# ### Handle compound property ###[39;00m
[1;32m   4841[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(validator, CompoundValidator):
[0;32m-> 4842[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_compound_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4844[0m [38;5;66;03m# ### Handle compound array property ###[39;00m
[1;32m   4845[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/basedatatypes.py:5253[0m, in [0;36mBasePlotlyType._set_compound_prop[0;34m(self, prop, val)[0m
[1;32m   5250[0m [38;5;66;03m# Import value[39;00m
[1;32m   5251[0m [38;5;66;03m# ------------[39;00m
[1;32m   5252[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[0;32m-> 5253[0m val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_skip_invalid[49m[43m)[49m
[1;32m   5255[0m [38;5;66;03m# Save deep copies of current and new states[39;00m
[1;32m   5256[0m [38;5;66;03m# ------------------------------------------[39;00m
[1;32m   5257[0m curr_val [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_compound_props[38;5;241m.[39mget(prop, [38;5;28;01mNone[39;00m)

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_plotly_utils/basevalidators.py:2476[0m, in [0;36mCompoundValidator.validate_coerce[0;34m(self, v, skip_invalid, _validate)[0m
[1;32m   2473[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class()
[1;32m   2475[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mdict[39m):
[0;32m-> 2476[0m     v [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_class[49m[43m([49m[43mv[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[43mskip_invalid[49m[43m,[49m[43m [49m[43m_validate[49m[38;5;241;43m=[39;49m[43m_validate[49m[43m)[49m
[1;32m   2478[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mself[39m[38;5;241m.[39mdata_class):
[1;32m   2479[0m     [38;5;66;03m# Copy object[39;00m
[1;32m   2480[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class(v)

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/graph_objs/layout/_legend.py:1032[0m, in [0;36mLegend.__init__[0;34m(self, arg, bgcolor, bordercolor, borderwidth, entrywidth, entrywidthmode, font, groupclick, grouptitlefont, itemclick, itemdoubleclick, itemsizing, itemwidth, orientation, title, tracegroupgap, traceorder, uirevision, valign, x, xanchor, y, yanchor, **kwargs)[0m
[1;32m   1028[0m     [38;5;28mself[39m[[38;5;124m"[39m[38;5;124myanchor[39m[38;5;124m"[39m] [38;5;241m=[39m _v
[1;32m   1030[0m [38;5;66;03m# Process unknown kwargs[39;00m
[1;32m   1031[0m [38;5;66;03m# ----------------------[39;00m
[0;32m-> 1032[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_kwargs[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mdict[39;49m[43m([49m[43marg[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m[43m)[49m
[1;32m   1034[0m [38;5;66;03m# Reset skip_invalid[39;00m
[1;32m   1035[0m [38;5;66;03m# ------------------[39;00m
[1;32m   1036[0m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid [38;5;241m=[39m [38;5;28;01mFalse[39;00m

File [0;32m/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/plotly/basedatatypes.py:4368[0m, in [0;36mBasePlotlyType._process_kwargs[0;34m(self, **kwargs)[0m
[1;32m   4366[0m     [38;5;28mself[39m[k] [38;5;241m=[39m v
[1;32m   4367[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid:
[0;32m-> 4368[0m     [38;5;28;01mraise[39;00m err

[0;31mValueError[0m: Invalid property specified for object of type plotly.graph_objs.layout.Legend: 'xref'

Did you mean "x"?

    Valid properties:
        bgcolor
            Sets the legend background color. Defaults to
            `layout.paper_bgcolor`.
        bordercolor
            Sets the color of the border enclosing the legend.
        borderwidth
            Sets the width (in px) of the border enclosing the
            legend.
        entrywidth
            Sets the width (in px or fraction) of the legend. Use 0
            to size the entry based on the text width, when
            `entrywidthmode` is set to "pixels".
        entrywidthmode
            Determines what entrywidth means.
        font
            Sets the font used to text the legend items.
        groupclick
            Determines the behavior on legend group item click.
            "toggleitem" toggles the visibility of the individual
            item clicked on the graph. "togglegroup" toggles the
            visibility of all items in the same legendgroup as the
            item clicked on the graph.
        grouptitlefont
            Sets the font for group titles in legend. Defaults to
            `legend.font` with its size increased about 10%.
        itemclick
            Determines the behavior on legend item click. "toggle"
            toggles the visibility of the item clicked on the
            graph. "toggleothers" makes the clicked item the sole
            visible item on the graph. False disables legend item
            click interactions.
        itemdoubleclick
            Determines the behavior on legend item double-click.
            "toggle" toggles the visibility of the item clicked on
            the graph. "toggleothers" makes the clicked item the
            sole visible item on the graph. False disables legend
            item double-click interactions.
        itemsizing
            Determines if the legend items symbols scale with their
            corresponding "trace" attributes or remain "constant"
            independent of the symbol size on the graph.
        itemwidth
            Sets the width (in px) of the legend item symbols (the
            part other than the title.text).
        orientation
            Sets the orientation of the legend.
        title
            :class:`plotly.graph_objects.layout.legend.Title`
            instance or dict with compatible properties
        tracegroupgap
            Sets the amount of vertical space (in px) between
            legend groups.
        traceorder
            Determines the order at which the legend items are
            displayed. If "normal", the items are displayed top-to-
            bottom in the same order as the input data. If
            "reversed", the items are displayed in the opposite
            order as "normal". If "grouped", the items are
            displayed in groups (when a trace `legendgroup` is
            provided). if "grouped+reversed", the items are
            displayed in the opposite order as "grouped".
        uirevision
            Controls persistence of legend-driven changes in trace
            and pie label visibility. Defaults to
            `layout.uirevision`.
        valign
            Sets the vertical alignment of the symbols with respect
            to their associated text.
        x
            Sets the x position (in normalized coordinates) of the
            legend. Defaults to 1.02 for vertical legends and
            defaults to 0 for horizontal legends.
        xanchor
            Sets the legend's horizontal position anchor. This
            anchor binds the `x` position to the "left", "center"
            or "right" of the legend. Value "auto" anchors legends
            to the right for `x` values greater than or equal to
            2/3, anchors legends to the left for `x` values less
            than or equal to 1/3 and anchors legends with respect
            to their center otherwise.
        y
            Sets the y position (in normalized coordinates) of the
            legend. Defaults to 1 for vertical legends, defaults to
            "-0.1" for horizontal legends on graphs w/o range
            sliders and defaults to 1.1 for horizontal legends on
            graph with one or multiple range sliders.
        yanchor
            Sets the legend's vertical position anchor This anchor
            binds the `y` position to the "top", "middle" or
            "bottom" of the legend. Value "auto" anchors legends at
            their bottom for `y` values less than or equal to 1/3,
            anchors legends to at their top for `y` values greater
            than or equal to 2/3 and anchors legends with respect
            to their middle otherwise.
        
Did you mean "x"?

Bad property path:
xref
^^^^
ValueError: Invalid property specified for object of type plotly.graph_objs.layout.Legend: 'xref'

Did you mean "x"?

    Valid properties:
        bgcolor
            Sets the legend background color. Defaults to
            `layout.paper_bgcolor`.
        bordercolor
            Sets the color of the border enclosing the legend.
        borderwidth
            Sets the width (in px) of the border enclosing the
            legend.
        entrywidth
            Sets the width (in px or fraction) of the legend. Use 0
            to size the entry based on the text width, when
            `entrywidthmode` is set to "pixels".
        entrywidthmode
            Determines what entrywidth means.
        font
            Sets the font used to text the legend items.
        groupclick
            Determines the behavior on legend group item click.
            "toggleitem" toggles the visibility of the individual
            item clicked on the graph. "togglegroup" toggles the
            visibility of all items in the same legendgroup as the
            item clicked on the graph.
        grouptitlefont
            Sets the font for group titles in legend. Defaults to
            `legend.font` with its size increased about 10%.
        itemclick
            Determines the behavior on legend item click. "toggle"
            toggles the visibility of the item clicked on the
            graph. "toggleothers" makes the clicked item the sole
            visible item on the graph. False disables legend item
            click interactions.
        itemdoubleclick
            Determines the behavior on legend item double-click.
            "toggle" toggles the visibility of the item clicked on
            the graph. "toggleothers" makes the clicked item the
            sole visible item on the graph. False disables legend
            item double-click interactions.
        itemsizing
            Determines if the legend items symbols scale with their
            corresponding "trace" attributes or remain "constant"
            independent of the symbol size on the graph.
        itemwidth
            Sets the width (in px) of the legend item symbols (the
            part other than the title.text).
        orientation
            Sets the orientation of the legend.
        title
            :class:`plotly.graph_objects.layout.legend.Title`
            instance or dict with compatible properties
        tracegroupgap
            Sets the amount of vertical space (in px) between
            legend groups.
        traceorder
            Determines the order at which the legend items are
            displayed. If "normal", the items are displayed top-to-
            bottom in the same order as the input data. If
            "reversed", the items are displayed in the opposite
            order as "normal". If "grouped", the items are
            displayed in groups (when a trace `legendgroup` is
            provided). if "grouped+reversed", the items are
            displayed in the opposite order as "grouped".
        uirevision
            Controls persistence of legend-driven changes in trace
            and pie label visibility. Defaults to
            `layout.uirevision`.
        valign
            Sets the vertical alignment of the symbols with respect
            to their associated text.
        x
            Sets the x position (in normalized coordinates) of the
            legend. Defaults to 1.02 for vertical legends and
            defaults to 0 for horizontal legends.
        xanchor
            Sets the legend's horizontal position anchor. This
            anchor binds the `x` position to the "left", "center"
            or "right" of the legend. Value "auto" anchors legends
            to the right for `x` values greater than or equal to
            2/3, anchors legends to the left for `x` values less
            than or equal to 1/3 and anchors legends with respect
            to their center otherwise.
        y
            Sets the y position (in normalized coordinates) of the
            legend. Defaults to 1 for vertical legends, defaults to
            "-0.1" for horizontal legends on graphs w/o range
            sliders and defaults to 1.1 for horizontal legends on
            graph with one or multiple range sliders.
        yanchor
            Sets the legend's vertical position anchor This anchor
            binds the `y` position to the "top", "middle" or
            "bottom" of the legend. Value "auto" anchors legends at
            their bottom for `y` values less than or equal to 1/3,
            anchors legends to at their top for `y` values greater
            than or equal to 2/3 and anchors legends with respect
            to their middle otherwise.
        
Did you mean "x"?

Bad property path:
xref
^^^^

